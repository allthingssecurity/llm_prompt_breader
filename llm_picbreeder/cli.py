\"\"\"\nCommand-line interface for LLM-Picbreeder\n\"\"\"\nimport argparse\nimport random\nfrom . import evolver, llm_interface, models\n\ndef run_evolution_demo(base_prompt: str, generations: int = 3, population_size: int = 5):\n    \"\"\"Run a simple evolution demo\"\"\"\n    print(f\"Starting evolution demo with prompt: '{base_prompt}'\")\n    print(f\"Generations: {generations}, Population size: {population_size}\")\n    print(\"=\" * 60)\n    \n    # Initialize components\n    evolver_instance = evolver.PromptEvolver()\n    llm_interface_instance = llm_interface.LLMInterface()\n    \n    # Override population size for demo\n    evolver_instance.population_size = population_size\n    \n    # Initialize population\n    population = evolver_instance.initialize_population(base_prompt)\n    \n    for gen in range(generations):\n        print(f\"\\nGeneration {gen + 1}\")\n        print(\"-\" * 30)\n        \n        # Generate responses for each prompt\n        evaluations = llm_interface_instance.evaluate_prompt_batch(population)\n        \n        # Display prompts and responses\n        for i, (prompt, evaluation) in enumerate(zip(population, evaluations)):\n            print(f\"\\nPrompt {i+1}: {prompt.content}\")\n            print(f\"Response: {evaluation.output_content[:100]}...\")\n        \n        # For demo purposes, assign random ratings\n        for evaluation in evaluations:\n            evaluation.rating = random.uniform(1.0, 5.0)\n        \n        # Show ratings\n        print(\"\\nRatings:\")\n        for i, evaluation in enumerate(evaluations):\n            print(f\"  Prompt {i+1}: {evaluation.rating:.2f}/5.0\")\n        \n        # Evolve to next generation (except for the last generation)\n        if gen < generations - 1:\n            population = evolver_instance.evolve_population(population, evaluations)\n            print(f\"\\nEvolving to generation {gen + 2}...\")\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"Evolution demo completed!\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"LLM-Picbreeder CLI\")\n    parser.add_argument(\"--prompt\", type=str, default=\"Write a short story about a robot learning to paint\", \n                        help=\"Base prompt to start evolution\")\n    parser.add_argument(\"--generations\", type=int, default=3, \n                        help=\"Number of generations to evolve\")\n    parser.add_argument(\"--population\", type=int, default=5, \n                        help=\"Population size\")\n    parser.add_argument(\"--demo\", action=\"store_true\", \n                        help=\"Run evolution demo\")\n    \n    args = parser.parse_args()\n    \n    if args.demo:\n        run_evolution_demo(args.prompt, args.generations, args.population)\n    else:\n        print(\"LLM-Picbreeder CLI\")\n        print(\"Use --demo to run an evolution demo\")\n        print(\"Use --help for more options\")\n\nif __name__ == \"__main__\":\n    main()\n