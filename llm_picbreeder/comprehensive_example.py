\"\"\"\nComprehensive example of LLM-Picbreeder workflow\n\"\"\"\nimport sys\nimport os\n\n# Add the parent directory to the path so we can import our modules\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\n\nfrom llm_picbreeder import evolver, llm_interface, models, database\n\ndef setup_database():\n    \"\"\"Set up the database\"\"\"\n    database.init_db()\n    print(\"Database initialized\")\n\ndef demonstrate_workflow():\n    \"\"\"Demonstrate the complete workflow\"\"\"\n    print(\"LLM-Picbreeder Comprehensive Workflow Demonstration\")\n    print(\"=\" * 60)\n    \n    # 1. Initialize components\n    print(\"\\n1. Initializing components...\")\n    prompt_evolver = evolver.PromptEvolver()\n    llm_interface_instance = llm_interface.LLMInterface()\n    \n    # 2. Create initial prompt population\n    print(\"\\n2. Creating initial prompt population...\")\n    base_prompt = \"Explain the concept of artificial intelligence in simple terms\"\n    population = prompt_evolver.initialize_population(base_prompt, size=3)\n    \n    for i, prompt in enumerate(population):\n        print(f\"  Prompt {i+1}: {prompt.content}\")\n    \n    # 3. Generate responses (simulated)\n    print(\"\\n3. Generating responses from LLM...\")\n    evaluations = llm_interface_instance.evaluate_prompt_batch(population)\n    \n    # For demo purposes, we'll create mock responses\n    mock_responses = [\n        \"Artificial intelligence is like teaching computers to think and learn like humans do.\",\n        \"AI is computer systems that can perform tasks normally requiring human intelligence.\",\n        \"Artificial intelligence refers to machines designed to act intelligently like humans.\"\n    ]\n    \n    for i, evaluation in enumerate(evaluations):\n        evaluation.output_content = mock_responses[i] if i < len(mock_responses) else f\"Response for prompt {i+1}\"\n        evaluation.rating = 5.0 - i  # Decreasing ratings\n        print(f\"  Response {i+1}: {evaluation.output_content}\")\n    \n    # 4. Show ratings\n    print(\"\\n4. User ratings (simulated):\")\n    for i, evaluation in enumerate(evaluations):\n        print(f\"  Prompt {i+1} rating: {evaluation.rating}/5.0\")\n    \n    # 5. Evolve population\n    print(\"\\n5. Evolving to next generation...\")\n    next_generation = prompt_evolver.evolve_population(population, evaluations)\n    \n    print(\"  New population:\")\n    for i, prompt in enumerate(next_generation):\n        print(f\"    Prompt {i+1}: {prompt.content}\")\n    \n    # 6. Explain the collaborative aspect\n    print(\"\\n6. Collaborative Evolution Concept:\")\n    print(\"  - Users can branch from any published prompt/response pair\")\n    print(\"  - Each user can evolve prompts in their own direction\")\n    print(\"  - The community collectively explores the prompt design space\")\n    print(\"  - High-quality prompts emerge through collaborative refinement\")\n    \n    # 7. Benefits of this approach\n    print(\"\\n7. Benefits of LLM-Picbreeder Approach:\")\n    print(\"  - Overcomes single-user fatigue in prompt engineering\")\n    print(\"  - Leverages collective intelligence of many users\")\n    print(\"  - Systematically explores vast prompt design spaces\")\n    print(\"  - Preserves and builds upon successful innovations\")\n    print(\"  - Creates a community-driven optimization process\")\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"Workflow demonstration complete!\")\n\ndef main():\n    setup_database()\n    demonstrate_workflow()\n\nif __name__ == \"__main__\":\n    main()\n